---

- become: True
  block:

  - name: Install dnsmasq
    yum:
      name: dnsmasq
      state: installed

  - when: dnsmasq_provide_pxe
    block:
    - name: Create the TFTP server path
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        mode: 0755
      loop:
        - "{{ dnsmasq_tftp_path }}"
        - "{{ dnsmasq_tftp_path }}/pxelinux.cfg"

    - name: Copy bootloader files
      copy:
        src: "{{ item }}"
        dest: "{{ dnsmasq_tftp_path }}/{{ item }}"
        owner: root
        mode: 0755
      loop:
        - pxelinux.0
        - menu.c32
        - grubx64.efi

    - name: Render the PXE menus
      template:
        src: "{{ item.src }}"
        dest: "{{ dnsmasq_tftp_path }}/{{ item.dest }}"
        mode: 0644
      loop:
        - { src: pxe-default.j2, dest: pxelinux.cfg/default }
        - { src: grub.cfg.j2, dest: grub.cfg }

    - name: Render any extra PXE menus
      template:
        src: "pxe-extra.j2"
        dest: "{{ dnsmasq_tftp_path }}/pxelinux.cfg/{{ item.postfix }}"
        mode: 0644
      loop: "{{ dnsmasq_extra_pxe_menus }}"

    - name: Render any extra Grub configs
      template:
        src: "grub.cfg-extra.j2"
        dest: "{{ dnsmasq_tftp_path }}/grub.cfg-{{ item.postfix }}"
        mode: 0644
      loop: "{{ dnsmasq_extra_pxe_menus }}"

    - name: Make directories for any files that should be on the TFTP server
      file:
        path: "{{ dnsmasq_tftp_path }}/{{ item.dest | dirname }}"
        state: directory
        owner: root
        mode: 0755
      loop: "{{ dnsmasq_get_tftp_files }}"

    - name: Get any files that should be on the TFTP server
      get_url:
        url: "{{ item.url }}"
        dest: "{{ dnsmasq_tftp_path}}/{{ item.dest }}"
        mode: 0644
      loop: "{{ dnsmasq_get_tftp_files }}"

    - name: Set SELinux context when SELinux is enabled
      sefcontext:
        target: '{{ dnsmasq_tftp_path }}(/.*)?'
        setype: tftpdir_t
      when: ansible_selinux.status == 'enabled'


  - name: Render the config
    template:
      src: "dnsmasq.conf.j2"
      dest: "/etc/dnsmasq.conf"
      backup: yes
    register: dnsmasq_conf_result

  - name: Add hosts block to /etc/hosts
    blockinfile:
      path: /etc/hosts
      block: |
        {% for host in dnsmasq_host_list %}
        {{ host.address }}  {{ host.name }}.{{ dnsmasq_domain_name }} {{ host.name }}
        {% endfor %}

        {% for host in dnsmasq_etc_hosts %}
        {{ host.address }}  {{ host.name }}.{{ dnsmasq_domain_name }} {{ host.name }}
        {% endfor %}
    register: dnsmasq_hosts_result
    when: dnsmasq_conf_etc_hosts

  - name: Restart dnsmasq when the configs change
    systemd:
      name: dnsmasq.service
      state: restarted
    when: dnsmasq_conf_result is changed or dnsmasq_hosts_result is changed

  - name: Start and Enable dnsmasq
    systemd:
      name: dnsmasq.service
      state: started
      enabled: True

  - name: Open firewall ports
    firewalld:
      service: "{{ item }}"
      permanent: true
      immediate: true
      zone: "{{ dnsmasq_firewalld_zone }}"
      state: enabled
    loop:
      - dhcp
      - dns
      - tftp
    when: dnsmasq_conf_firewalld

  - name: Logrotate config for dnsmasq
    copy:
      src: dnsmasq-logrotate.conf
      dest: /etc/logrotate.d/dnsmasq.conf
